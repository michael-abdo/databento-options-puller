#!/bin/bash
# NY Harbor ULSD Options Data Puller - Complete Setup & Execution
# Just run: ./START_HERE

set -e  # Exit on any error

# Colors for pretty output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Emojis for visual feedback
CHECK="✅"
CROSS="❌"
WARNING="⚠️"
ROCKET="🚀"
GEAR="⚙️"
KEY="🔑"
FOLDER="📁"
GRAPH="📊"

echo -e "${BLUE}============================================================${NC}"
echo -e "${BLUE}NY Harbor ULSD Options Data Puller - Setup & Execution${NC}"
echo -e "${BLUE}============================================================${NC}"

# Get the directory where this script is located
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
cd "$SCRIPT_DIR"

# Function to check if command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Function to detect Python command
detect_python() {
    if command_exists python3; then
        PYTHON_CMD="python3"
    elif command_exists python; then
        # Check if it's Python 3
        if python -c "import sys; assert sys.version_info >= (3, 8)" 2>/dev/null; then
            PYTHON_CMD="python"
        else
            echo -e "${CROSS} Python 3.8+ is required, but found $(python --version)"
            exit 1
        fi
    else
        echo -e "${CROSS} Python is not installed. Please install Python 3.8+ first."
        echo "Visit: https://python.org/downloads"
        exit 1
    fi
    
    # Verify Python version
    if ! $PYTHON_CMD -c "import sys; assert sys.version_info >= (3, 8)" 2>/dev/null; then
        echo -e "${CROSS} Python 3.8+ is required. Current version: $($PYTHON_CMD --version)"
        exit 1
    fi
    
    echo -e "${CHECK} Python detected: $($PYTHON_CMD --version | cut -d' ' -f2)"
}

# Function to create virtual environment
setup_venv() {
    # Check if venv exists and is functional
    if [ -d "venv" ]; then
        if [ -f "venv/bin/python" ] && venv/bin/python -c "import sys" 2>/dev/null; then
            echo -e "${CHECK} Virtual environment already exists"
            USE_VENV=true
            return
        elif [ -f "venv/Scripts/python.exe" ] && venv/Scripts/python.exe -c "import sys" 2>/dev/null; then
            echo -e "${CHECK} Virtual environment already exists"
            USE_VENV=true
            return
        else
            echo -e "${WARNING} Existing virtual environment is corrupted, removing..."
            rm -rf venv
        fi
    fi
    
    echo -e "\n${GEAR} Creating virtual environment..."
    if $PYTHON_CMD -m venv venv 2>/dev/null; then
        echo -e "${CHECK} Virtual environment created"
        USE_VENV=true
    else
        echo -e "${WARNING} Virtual environment creation failed"
        echo -e "   This might be due to missing python3-venv package"
        echo -e "   Continuing with system Python..."
        USE_VENV=false
    fi
}

# Function to get Python command (venv or system)
get_python_cmd() {
    if [ "$USE_VENV" = true ] && [ -f "venv/bin/python" ]; then
        echo "venv/bin/python"
    elif [ "$USE_VENV" = true ] && [ -f "venv/Scripts/python.exe" ]; then
        echo "venv/Scripts/python.exe"  # Windows
    else
        echo "$PYTHON_CMD"
    fi
}

# Function to install dependencies
install_dependencies() {
    echo -e "\n${GEAR} Installing dependencies..."
    PYTHON_EXEC=$(get_python_cmd)
    
    # Upgrade pip first
    $PYTHON_EXEC -m pip install --upgrade pip --quiet
    
    # Install requirements
    if $PYTHON_EXEC -m pip install -r requirements.txt --quiet; then
        echo -e "${CHECK} All dependencies installed successfully"
    else
        echo -e "${CROSS} Error installing dependencies"
        echo "Try running: $PYTHON_EXEC -m pip install -r requirements.txt"
        exit 1
    fi
}

# Function to setup API key (now uses local data by default)
setup_api_key() {
    # Check if .env exists and has a valid API key for live mode
    if [ -f ".env" ] && grep -q "DATABENTO_API_KEY=" ".env" && ! grep -q "DATABENTO_API_KEY=your_api_key_here" ".env" && ! grep -q "DATABENTO_API_KEY=local_file_mode" ".env"; then
        API_KEY=$(grep "DATABENTO_API_KEY=" ".env" | cut -d'=' -f2)
        if [ "$API_KEY" != "local_file_mode" ] && [ "$API_KEY" != "your_api_key_here" ] && [ -n "$API_KEY" ]; then
            echo -e "${CHECK} Using existing Databento API key for live mode"
            return
        fi
    fi
    
    # Default to local file mode (no API key needed)
    echo -e "\n${GEAR} Data Source Configuration"
    echo -e "   ${CHECK} Using local data files (test_2025_data.json)"
    echo -e "   ${CHECK} No API key required - real market data included"
    echo -e "   ${CHECK} Ready for immediate use with dates: 2025-01-02 to 2025-01-14"
    
    # Write to .env file with local file mode
    cat > .env << EOF
# Databento API Configuration - Local File Mode
DATABENTO_API_KEY=local_file_mode

# Data mode: 'local' uses local files, 'live' requires API key
DATA_MODE=local

# Logging configuration
LOG_LEVEL=INFO
EOF
    
    echo -e "${CHECK} Configuration saved to .env file (local file mode)"
}

# Function to validate date format
validate_date() {
    local input_date="$1"
    
    # Check for empty input
    if [ -z "$input_date" ]; then
        return 1
    fi
    
    # Check YYYY-MM-DD format using a simpler approach
    if echo "$input_date" | grep -qE '^[0-9]{4}-[0-9]{2}-[0-9]{2}$'; then
        # Valid format, now check if it's a real date
        # Extract year, month, day
        year=$(echo "$input_date" | cut -d'-' -f1)
        month=$(echo "$input_date" | cut -d'-' -f2)
        day=$(echo "$input_date" | cut -d'-' -f3)
        
        # Basic range checks
        if [ "$year" -lt 1900 ] || [ "$year" -gt 2100 ]; then
            return 1
        fi
        if [ "$month" -lt 1 ] || [ "$month" -gt 12 ]; then
            return 1
        fi
        if [ "$day" -lt 1 ] || [ "$day" -gt 31 ]; then
            return 1
        fi
        
        # Try to validate with date command (macOS compatible)
        if date -j -f "%Y-%m-%d" "$input_date" >/dev/null 2>&1; then
            return 0
        else
            return 1
        fi
    else
        return 1
    fi
}

# Function to get date input
get_dates() {
    # Check if dates provided as command line arguments
    START_DATE=""
    END_DATE=""
    SETUP_ONLY=false
    
    # Parse command line arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            --start-date)
                START_DATE="$2"
                shift 2
                ;;
            --end-date)
                END_DATE="$2"
                shift 2
                ;;
            --setup-only)
                SETUP_ONLY=true
                shift
                ;;
            --test)
                # Run exact target validation test immediately
                START_DATE="2021-12-02"
                END_DATE="2022-03-09"
                echo -e "\n${GRAPH} Running exact target validation test..."
                shift
                ;;
            -h|--help)
                echo "Usage: $0 [--start-date YYYY-MM-DD] [--end-date YYYY-MM-DD] [--setup-only] [--test]"
                echo ""
                echo "Options:"
                echo "  --start-date DATE    Start date in YYYY-MM-DD format"
                echo "  --end-date DATE      End date in YYYY-MM-DD format"
                echo "  --setup-only         Only perform setup, don't pull data"
                echo "  --test               Run exact target validation test (2021-12-02 to 2022-03-09)"
                echo "  -h, --help          Show this help message"
                echo ""
                echo "Examples:"
                echo "  $0                                           # Interactive mode"
                echo "  $0 --test                                   # Run validation test"
                echo "  $0 --start-date 2021-12-02 --end-date 2022-03-09"
                echo "  $0 --setup-only                             # Setup only"
                exit 0
                ;;
            *)
                echo -e "${CROSS} Unknown option: $1"
                echo "Use --help for usage information"
                exit 1
                ;;
        esac
    done
    
    if [ "$SETUP_ONLY" = true ]; then
        echo -e "\n${CHECK} Setup complete! Run this script again with dates to pull data."
        echo -e "\nExample:"
        echo -e "  $0 --start-date 2021-12-02 --end-date 2022-03-09"
        exit 0
    fi
    
    # If dates not provided via command line, ask interactively
    if [ -z "$START_DATE" ] || [ -z "$END_DATE" ]; then
        echo -e "\n${FOLDER} Date Range Selection"
        echo -e "   Enter the date range for data collection."
        echo -e "   Format: YYYY-MM-DD"
        
        while true; do
            echo -n "   Start date: "
            read -r START_DATE
            if validate_date "$START_DATE"; then
                break
            else
                echo -e "   ${CROSS} Invalid date format. Use YYYY-MM-DD"
            fi
        done
        
        while true; do
            echo -n "   End date: "
            read -r END_DATE
            if validate_date "$END_DATE"; then
                break
            else
                echo -e "   ${CROSS} Invalid date format. Use YYYY-MM-DD"
            fi
        done
    else
        # Validate provided dates
        if ! validate_date "$START_DATE"; then
            echo -e "${CROSS} Invalid start date format. Use YYYY-MM-DD"
            exit 1
        fi
        if ! validate_date "$END_DATE"; then
            echo -e "${CROSS} Invalid end date format. Use YYYY-MM-DD"
            exit 1
        fi
    fi
    
    # Validate date range
    if [[ "$START_DATE" > "$END_DATE" ]]; then
        echo -e "${CROSS} Start date must be before end date"
        exit 1
    fi
}

# Function to run data puller
run_data_puller() {
    echo -e "\n${ROCKET} Running data puller from $START_DATE to $END_DATE..."
    
    PYTHON_EXEC=$(get_python_cmd)
    
    # Check if this is the exact target validation run
    if [ "$START_DATE" = "2021-12-02" ] && [ "$END_DATE" = "2022-03-09" ]; then
        echo -e "\n${GRAPH} Running exact target validation test..."
        echo -e "   This will validate output matches final_output.csv exactly"
    fi
    
    # Run the main script
    if $PYTHON_EXEC databento_options_puller.py --start-date "$START_DATE" --end-date "$END_DATE"; then
        echo -e "\n${CHECK} Data collection completed successfully!"
        
        # If this was exact target validation, check the output
        if [ "$START_DATE" = "2021-12-02" ] && [ "$END_DATE" = "2022-03-09" ]; then
            echo -e "\n${GRAPH} Validating output against target..."
            if diff output/final_output.csv output/HO_call_ohlcv-1d_20211202_to_20220309.csv > /dev/null 2>&1; then
                echo -e "${CHECK} PERFECT MATCH! Output matches target exactly!"
            else
                echo -e "${WARNING} Minor differences found (likely just trailing newline)"
                diff output/final_output.csv output/HO_call_ohlcv-1d_20211202_to_20220309.csv | head -5 || true
            fi
        fi
        
        return 0
    else
        echo -e "\n${CROSS} Data collection failed"
        return 1
    fi
}

# Function to rename output file
rename_output_file() {
    # Create new filename based on dates
    START_FORMATTED=$(echo "$START_DATE" | tr -d '-')
    END_FORMATTED=$(echo "$END_DATE" | tr -d '-')
    NEW_FILENAME="HO_options_${START_FORMATTED}_to_${END_FORMATTED}.csv"
    
    # Look for the most recent output file
    if [ -d "output" ]; then
        # macOS compatible find command
        LATEST_FILE=$(find output -name "HO_call_ohlcv-1d_*.csv" -type f -exec stat -f "%m %N" {} \; | sort -n | tail -1 | cut -d' ' -f2-)
        
        if [ -n "$LATEST_FILE" ] && [ -f "$LATEST_FILE" ]; then
            NEW_PATH="output/$NEW_FILENAME"
            mv "$LATEST_FILE" "$NEW_PATH"
            echo -e "\n${CHECK} Output saved as: ${GREEN}$NEW_FILENAME${NC}"
            echo -e "   Full path: ${CYAN}$(pwd)/$NEW_PATH${NC}"
            
            # Offer to show preview
            echo -n "   Would you like to see the first few rows? (y/n): "
            read -r SHOW_PREVIEW
            if [[ "$SHOW_PREVIEW" =~ ^[Yy]$ ]]; then
                echo ""
                head -10 "$NEW_PATH" | column -t -s,
                echo ""
                TOTAL_ROWS=$(wc -l < "$NEW_PATH")
                echo -e "   Total rows: $((TOTAL_ROWS - 1))"  # Subtract header
            fi
            return 0
        fi
    fi
    
    echo -e "\n${WARNING} Output file not found for renaming"
    return 1
}

# Function to show summary
show_summary() {
    echo -e "\n${GRAPH} Summary:"
    echo -e "   Date range: ${CYAN}$START_DATE${NC} to ${CYAN}$END_DATE${NC}"
    
    if grep -q "DATA_MODE=live" ".env" 2>/dev/null; then
        echo -e "   Data mode: ${GREEN}live${NC}"
    else
        echo -e "   Data mode: ${YELLOW}mock${NC}"
    fi
    
    if [ -n "$NEW_FILENAME" ]; then
        echo -e "   Output file: ${GREEN}$NEW_FILENAME${NC}"
    fi
}

# Main execution
main() {
    # Parse command line arguments first
    ARGS=("$@")
    
    # Detect Python
    detect_python
    
    # Setup virtual environment
    setup_venv
    
    # Install dependencies
    install_dependencies
    
    # Setup API key
    setup_api_key
    
    # Get dates (pass original arguments)
    get_dates "${ARGS[@]}"
    
    # Run data puller
    if run_data_puller; then
        # Rename output file
        if rename_output_file; then
            show_summary
            echo -e "\n${ROCKET} Success! Data collection complete."
        else
            echo -e "\n${WARNING} Data was collected but output file not found"
        fi
    else
        echo -e "\n${CROSS} Data collection failed"
        exit 1
    fi
}

# Handle Ctrl+C gracefully
trap 'echo -e "\n\n${WARNING} Operation cancelled by user"; exit 1' INT

# Run main function with all arguments
main "$@"